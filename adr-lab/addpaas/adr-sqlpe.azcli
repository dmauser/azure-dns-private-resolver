# **** Validation *****
#Parameters
rg=lab-dns-resolver 
location=eastus
password=Msft123Msft123
dnsvmname=onprem-windns

# Create a sqlserver to hub VNET, spoke VNETs
randomIdentifier1=$RANDOM 
az sql server create --name hubsql$randomIdentifier1 --resource-group $rg --location $location --admin-user sqladmin --admin-password $password -o none
az sql server create --name spk1sql$randomIdentifier1 --resource-group $rg --location $location --admin-user sqladmin --admin-password $password -o none
az sql server create --name spk2sql$randomIdentifier1 --resource-group $rg --location $location --admin-user sqladmin --admin-password $password -o none

# Create SQL database with lowest cost
az sql db create --resource-group $rg --server hubsql$randomIdentifier1 --name hubsqldb$RANDOM --service-objective Basic --output none
az sql db create --resource-group $rg --server spk1sql$randomIdentifier1 --name spk1sqldb$RANDOM --service-objective Basic --output none
az sql db create --resource-group $rg --server spk2sql$randomIdentifier1 --name spk2sqldb$RANDOM --service-objective Basic --output none

# Add SQL Server as private endpoint on the Hub VNET
sqlname=$(az sql server list -g $rg --query '[?contains(name,`'hub'`)].{name:name}' -o tsv)
az network private-endpoint create \
    --resource-group $rg \
    --name hubsqlpe \
    --vnet-name az-hub-vnet \
    --subnet pesubnet \
    --private-connection-resource-id $(az sql server show --name $sqlname --resource-group $rg --query id --output tsv) \
    --group-ids sqlServer \
    --connection-name hubsqlserverpeconn \
    --output none

# Add SQL Server as private endpoint on the Spoke1 VNET
sqlname=$(az sql server list -g $rg --query '[?contains(name,`'spk1'`)].{name:name}' -o tsv)
az network private-endpoint create \
    --resource-group $rg \
    --name spk1sqlpe \
    --vnet-name az-spk1-vnet \
    --subnet pesubnet \
    --private-connection-resource-id $(az sql server show --name $sqlname --resource-group $rg --query id --output tsv) \
    --group-ids sqlServer \
    --connection-name spk1sqlserverpeconn \
    --output none

# Add SQL Server as private endpoint on the Spoke2 VNET
sqlname=$(az sql server list -g $rg --query '[?contains(name,`'spk2'`)].{name:name}' -o tsv)
az network private-endpoint create \
    --resource-group $rg \
    --name spk2sqlpe \
    --vnet-name az-spk2-vnet \
    --subnet pesubnet \
    --private-connection-resource-id $(az sql server show --name $sqlname --resource-group $rg --query id --output tsv) \
    --group-ids sqlServer \
    --connection-name spk2sqlserverpeconn \
    --output none

# Create Azure Private DNS Zone for SQL Server
az network private-dns zone create \
    --resource-group $rg \
    --name "privatelink.database.windows.net" \
    --output none

# Create Private DNS Zone link for SQL Server on hub VNET
az network private-dns link vnet create \
    --resource-group $rg \
    --zone-name "privatelink.database.windows.net" \
    --name hubsqlserverlink \
    --virtual-network az-hub-vnet \
    --registration-enabled false \
    --output none

# Create DNS-zone group for each SQL Server private endpoint
for pe in $(az network private-endpoint list --resource-group $rg --query "[?contains(name, 'sql')].name" --output tsv)
do
    az network private-endpoint dns-zone-group create \
        --resource-group $rg \
        --endpoint-name $pe \
        --name privatelink_database_windows_net \
        --private-dns-zone privatelink.database.windows.net \
        --zone-name default \
        --output none
done

# Create an DNS Private Resolver forward rule for privatelink.database.windows.net
dnsresolverip=$(az dns-resolver inbound-endpoint show -g $rg --dns-resolver-name $AzurehubName-dnsresolver --name InboundEndpoint --query ipConfigurations[].privateIpAddress -o tsv)
az dns-resolver forwarding-rule create -g $rg --name pldb \
 --ruleset-name $AzurehubName-fwd-ruleset \
 --domain-name "privatelink.database.windows.net." \
 --forwarding-rule-state "Enabled" \
 --target-dns-servers '[{"ip-address":"'$dnsresolverip'","port":"53"}]' \
 --output none

#***** Configuring On-Premises DNS *****
echo Configuring On-premises DNS Server
# Add Azure SQL Server private endpoint to on-premises DNS server
dnsresolverip=$(az dns-resolver inbound-endpoint show -g $rg --dns-resolver-name $AzurehubName-dnsresolver --name InboundEndpoint --query ipConfigurations[].privateIpAddress -o tsv)
onpremvmip=$(az network nic show --name onprem-lxvm-nic -g $rg  --query "ipConfigurations[0].privateIPAddress" -o tsv)
az vm run-command invoke --command-id RunPowerShellScript \
 --name onprem-windns \
 --resource-group $rg \
 --scripts 'param([string]$arg1)' \
 'Add-DnsServerConditionalForwarderZone -Name "database.windows.net" -MasterServers $arg1 -PassThru' \
 --parameters $(echo "arg1=$dnsresolverip") \
 --output none

## Run the following commands on the onprem-lxvm

 #Install the SQL Server command-line tools sqlcmd and bcp on Ubuntu
#https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools?view=sql-server-ver15
curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
sudo apt-get update
sudo apt-get install mssql-tools18 unixodbc-dev
echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
source ~/.bashrc

# Validation
# List SQL Server PE:
sqlserverdns=$(az sql server show --name $sqlserver --resource-group $rg --query fullyQualifiedDomainName --output tsv)

# Run the following the output command on the onprem-lxvm:
echo "sqlcmd -S $sqlserverdns -U sqladmin -P $password -Q 'SELECT @@VERSION'"

# Expected output:
# Microsoft SQL Azure (RTM) - 12.0.2000.8 
# Nov  2 2023 01:40:17 
# Copyright (C) 2022 Microsoft Corporation

# List all databases:
echo "sqlcmd -S $sqlserverdns -U sqladmin -P $password -Q 'SELECT name FROM sys.databases'"

# Expected output:
# name                                                                                                                            
# --------------------------------------------------------------------------------------------------------------------------------
# master                                                                                                                          
# hubsqldb22486 <=SQL Private Endpoint name    


# List all SQL server private endpoints:
az sql server list -g $rg --query [].fullyQualifiedDomainName --output tsv
